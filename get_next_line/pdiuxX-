PRINTF(3)               Linux Programmer's Manual              PRINTF(3)

NNAAMMEE
       printf,  fprintf,  dprintf, sprintf, snprintf, vprintf, vfprintf,
       vdprintf, vsprintf, vsnprintf - formatted output conversion

SSYYNNOOPPSSIISS
       ##iinncclluuddee <<ssttddiioo..hh>>

       iinntt pprriinnttff((ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       iinntt ffpprriinnttff((FFIILLEE **_s_t_r_e_a_m,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       iinntt ddpprriinnttff((iinntt _f_d,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       iinntt sspprriinnttff((cchhaarr **_s_t_r,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;
       iinntt ssnnpprriinnttff((cchhaarr **_s_t_r,, ssiizzee__tt _s_i_z_e,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, ......));;

       ##iinncclluuddee <<ssttddaarrgg..hh>>

       iinntt vvpprriinnttff((ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;
       iinntt vvffpprriinnttff((FFIILLEE **_s_t_r_e_a_m,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;
       iinntt vvddpprriinnttff((iinntt _f_d,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;
       iinntt vvsspprriinnttff((cchhaarr **_s_t_r,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;
       iinntt vvssnnpprriinnttff((cchhaarr **_s_t_r,, ssiizzee__tt _s_i_z_e,, ccoonnsstt cchhaarr **_f_o_r_m_a_t,, vvaa__lliisstt _a_p));;

   Feature   Test   Macro   Requirements    for    glibc    (see    ffeeaa‐‐
   ttuurree__tteesstt__mmaaccrrooss(7)):

       ssnnpprriinnttff(), vvssnnpprriinnttff():
           _XOPEN_SOURCE >= 500 || _ISOC99_SOURCE ||
               || /* Glibc versions <= 2.19: */ _BSD_SOURCE

       ddpprriinnttff(), vvddpprriinnttff():
           Since glibc 2.10:
               _POSIX_C_SOURCE >= 200809L
           Before glibc 2.10:
               _GNU_SOURCE

DDEESSCCRRIIPPTTIIOONN
       The  functions in the pprriinnttff() family produce output according to
       a  _f_o_r_m_a_t  as  described  below.   The  functions  pprriinnttff()   and
       vvpprriinnttff()  write  output  to  _s_t_d_o_u_t, the standard output stream;
       ffpprriinnttff() and vvffpprriinnttff() write output to the given output _s_t_r_e_a_m;
       sspprriinnttff(),  ssnnpprriinnttff(),  vvsspprriinnttff()  and vvssnnpprriinnttff() write to the
       character string _s_t_r.

       The function ddpprriinnttff() is the same as ffpprriinnttff()  except  that  it
       outputs to a file descriptor, _f_d, instead of to a _s_t_d_i_o stream.

       The functions ssnnpprriinnttff() and vvssnnpprriinnttff() write at most _s_i_z_e bytes
       (including the terminating null byte ('\0')) to _s_t_r.

       The functions vvpprriinnttff(), vvffpprriinnttff(), vvddpprriinnttff(), vvsspprriinnttff(),  vvss‐‐
       nnpprriinnttff()  are  equivalent  to the functions pprriinnttff(), ffpprriinnttff(),
       ddpprriinnttff(), sspprriinnttff(), ssnnpprriinnttff(), respectively, except that  they
       are  called  with a _v_a___l_i_s_t instead of a variable number of argu‐
       ments.  These functions do not call the  _v_a___e_n_d  macro.   Because
       they  invoke the _v_a___a_r_g macro, the value of _a_p is undefined after
       the call.  See ssttddaarrgg(3).

       All of these functions write the output under the  control  of  a
       _f_o_r_m_a_t  string  that specifies how subsequent arguments (or argu‐
       ments accessed via the  variable-length  argument  facilities  of
       ssttddaarrgg(3)) are converted for output.

       C99  and POSIX.1-2001 specify that the results are undefined if a
       call to sspprriinnttff(), ssnnpprriinnttff(), vvsspprriinnttff(), or  vvssnnpprriinnttff()  would
       cause  copying  to take place between objects that overlap (e.g.,
       if the target string array and one of the  supplied  input  argu‐
       ments refer to the same buffer).  See NOTES.

   FFoorrmmaatt ooff tthhee ffoorrmmaatt ssttrriinngg
       The  format string is a character string, beginning and ending in
       its initial shift state, if any.  The format string  is  composed
       of  zero  or  more directives: ordinary characters (not %%), which
       are copied unchanged to the output stream; and conversion  speci‐
       fications,  each of which results in fetching zero or more subse‐
       quent arguments.  Each conversion specification is introduced  by
       the  character  %%,  and ends with a _c_o_n_v_e_r_s_i_o_n _s_p_e_c_i_f_i_e_r.  In be‐
       tween there may be (in this order) zero or  more  _f_l_a_g_s,  an  op‐
       tional minimum _f_i_e_l_d _w_i_d_t_h, an optional _p_r_e_c_i_s_i_o_n and an optional
       _l_e_n_g_t_h _m_o_d_i_f_i_e_r.

       The arguments must correspond  properly  (after  type  promotion)
       with  the  conversion  specifier.   By default, the arguments are
       used in the order given, where each '*' (see _F_i_e_l_d _w_i_d_t_h and _P_r_e_‐
       _c_i_s_i_o_n below) and each conversion specifier asks for the next ar‐
       gument (and it is an error if insufficiently many  arguments  are
       given).  One can also specify explicitly which argument is taken,
       at each place where an argument is required, by writing "%m$" in‐
       stead  of '%' and "*m$" instead of '*', where the decimal integer
       _m denotes the position in the argument list of the desired  argu‐
       ment, indexed starting from 1.  Thus,

           printf("%*d", width, num);

       and

           printf("%2$*1$d", width, num);

       are  equivalent.   The second style allows repeated references to
       the same argument.  The C99 standard does not include  the  style
       using  '$',  which  comes from the Single UNIX Specification.  If
       the style using '$' is used, it must be used throughout  for  all
       conversions  taking an argument and all width and precision argu‐
       ments, but it may be mixed with "%%" formats, which do  not  con‐
       sume  an  argument.  There may be no gaps in the numbers of argu‐
       ments specified using '$'; for example, if arguments 1 and 3  are
       specified,  argument  2  must  also be specified somewhere in the
       format string.

       For some numeric conversions a radix character ("decimal  point")
       or  thousands'  grouping character is used.  The actual character
       used depends on the LLCC__NNUUMMEERRIICC part of the locale.   (See  sseettlloo‐‐
       ccaallee(3).)  The POSIX locale uses '.' as radix character, and does
       not have a grouping character.  Thus,

               printf("%'.2f", 1234567.89);

       results in "1234567.89" in the POSIX locale, in  "1234567,89"  in
       the nl_NL locale, and in "1.234.567,89" in the da_DK locale.

   FFllaagg cchhaarraacctteerrss
       The  character  %  is  followed  by zero or more of the following
       flags:

       ##      The value should be converted to an "alternate form".  For
              oo conversions, the first character of the output string is
              made zero (by prefixing a 0 if it was not  zero  already).
              For  xx  and XX conversions, a nonzero result has the string
              "0x" (or "0X" for XX conversions) prepended to it.  For  aa,
              AA,  ee,  EE, ff, FF, gg, and GG conversions, the result will al‐
              ways contain a decimal point, even if no digits follow  it
              (normally, a decimal point appears in the results of those
              conversions only if a digit follows).  For gg and GG conver‐
              sions,  trailing  zeros are not removed from the result as
              they would otherwise be.  For other conversions,  the  re‐
              sult is undefined.

       00      The value should be zero padded.  For dd, ii, oo, uu, xx, XX, aa,
              AA, ee, EE, ff, FF, gg, and GG conversions, the  converted  value
              is  padded  on the left with zeros rather than blanks.  If
              the 00 and -- flags both appear, the 00 flag is ignored.   If
              a  precision  is given with a numeric conversion (dd, ii, oo,
              uu, xx, and XX), the 00 flag is ignored.   For  other  conver‐
              sions, the behavior is undefined.

       --      The  converted  value  is to be left adjusted on the field
              boundary.  (The default is right justification.)  The con‐
              verted  value  is  padded on the right with blanks, rather
              than on the left with blanks or zeros.  A -- overrides a  00
              if both are given.

       '' ''    (a  space) A blank should be left before a positive number
              (or empty string) produced by a signed conversion.

       ++      A sign (+ or -) should always be placed  before  a  number
              produced  by  a  signed conversion.  By default, a sign is
              used only for negative numbers.  A ++ overrides a space  if
              both are used.

       The  five  flag characters above are defined in the C99 standard.
       The Single UNIX Specification specifies one further flag  charac‐
       ter.

       ''      For decimal conversion (ii, dd, uu, ff, FF, gg, GG) the output is
              to be grouped with thousands' grouping characters  if  the
              locale  information  indicates  any.   (See sseettllooccaallee(3).)
              Note that many versions of ggcccc(1) cannot parse this option
              and will issue a warning.  (SUSv2 did not include _%_'_F, but
              SUSv3 added it.)

       glibc 2.2 adds one further flag character.

       II      For decimal integer conversion (ii, dd, uu) the  output  uses
              the locale's alternative output digits, if any.  For exam‐
              ple, since glibc 2.2.3 this will give Arabic-Indic  digits
              in the Persian ("fa_IR") locale.

   FFiieelldd wwiiddtthh
       An optional decimal digit string (with nonzero first digit) spec‐
       ifying a minimum field width.  If the converted value  has  fewer
       characters than the field width, it will be padded with spaces on
       the left (or right, if the left-adjustment flag has been  given).
       Instead of a decimal digit string one may write "*" or "*m$" (for
       some decimal integer _m) to specify that the field width is  given
       in  the  next  argument,  or  in the _m-th argument, respectively,
       which must be of type _i_n_t.  A negative field width is taken as  a
       '-'  flag  followed by a positive field width.  In no case does a
       nonexistent or small field width cause truncation of a field;  if
       the  result  of  a  conversion is wider than the field width, the
       field is expanded to contain the conversion result.

   PPrreecciissiioonn
       An optional precision, in the form of a period ('.')  followed by
       an  optional  decimal  digit  string.  Instead of a decimal digit
       string one may write "*" or "*m$" (for some decimal integer _m) to
       specify  that  the precision is given in the next argument, or in
       the _m-th argument, respectively, which must be of type  _i_n_t.   If
       the  precision is given as just '.', the precision is taken to be
       zero.  A negative precision is taken as  if  the  precision  were
       omitted.   This  gives the minimum number of digits to appear for
       dd, ii, oo, uu, xx, and XX conversions, the number of digits to  appear
       after  the  radix character for aa, AA, ee, EE, ff, and FF conversions,
       the maximum number of significant digits for gg and GG conversions,
       or  the  maximum number of characters to be printed from a string
       for ss and SS conversions.

   LLeennggtthh mmooddiiffiieerr
       Here, "integer conversion" stands for dd, ii, oo, uu, xx, or XX conver‐
       sion.

       hhhh     A  following  integer  conversion  corresponds to a _s_i_g_n_e_d
              _c_h_a_r or _u_n_s_i_g_n_e_d _c_h_a_r argument, or a following  nn  conver‐
              sion corresponds to a pointer to a _s_i_g_n_e_d _c_h_a_r argument.

       hh      A  following integer conversion corresponds to a _s_h_o_r_t _i_n_t
              or _u_n_s_i_g_n_e_d _s_h_o_r_t _i_n_t argument, or a following  nn  conver‐
              sion corresponds to a pointer to a _s_h_o_r_t _i_n_t argument.

       ll      (ell) A following integer conversion corresponds to a _l_o_n_g
              _i_n_t or _u_n_s_i_g_n_e_d _l_o_n_g _i_n_t argument, or a following  nn  con‐
              version  corresponds  to a pointer to a _l_o_n_g _i_n_t argument,
              or a following cc conversion corresponds to a _w_i_n_t___t  argu‐
              ment, or a following ss conversion corresponds to a pointer
              to _w_c_h_a_r___t argument.

       llll     (ell-ell).  A following integer conversion corresponds  to
              a  _l_o_n_g  _l_o_n_g _i_n_t or _u_n_s_i_g_n_e_d _l_o_n_g _l_o_n_g _i_n_t argument, or a
              following nn conversion corresponds to a pointer to a  _l_o_n_g
              _l_o_n_g _i_n_t argument.

       qq      A  synonym  for  llll.  This is a nonstandard extension, de‐
              rived from BSD; avoid its use in new code.

       LL      A following aa, AA, ee, EE, ff, FF, gg, or  GG  conversion  corre‐
              sponds  to  a  _l_o_n_g _d_o_u_b_l_e argument.  (C99 allows %LF, but
              SUSv2 does not.)

       jj      A following integer conversion corresponds to an  _i_n_t_m_a_x___t
              or  _u_i_n_t_m_a_x___t argument, or a following nn conversion corre‐
              sponds to a pointer to an _i_n_t_m_a_x___t argument.

       zz      A following integer conversion corresponds to a _s_i_z_e___t  or
              _s_s_i_z_e___t  argument, or a following nn conversion corresponds
              to a pointer to a _s_i_z_e___t argument.

       ZZ      A nonstandard synonym for zz that predates  the  appearance
              of zz.  Do not use in new code.

       tt      A  following integer conversion corresponds to a _p_t_r_d_i_f_f___t
              argument, or a following nn  conversion  corresponds  to  a
              pointer to a _p_t_r_d_i_f_f___t argument.

       SUSv3  specifies all of the above, except for those modifiers ex‐
       plicitly noted as being nonstandard extensions.  SUSv2  specified
       only the length modifiers hh (in hhdd, hhii, hhoo, hhxx, hhXX, hhnn) and ll (in
       lldd, llii, lloo, llxx, llXX, llnn, llcc, llss) and LL (in LLee, LLEE, LLff, LLgg, LLGG).

       As a nonstandard extension, the GNU implementations treats llll and
       LL as synonyms, so that one can, for example, write llllgg (as a syn‐
       onym for the standards-compliant Lg)) and LLdd (as a synonym for the
       standards compliant lllldd).  Such usage is nonportable.

   CCoonnvveerrssiioonn ssppeecciiffiieerrss
       A  character that specifies the type of conversion to be applied.
       The conversion specifiers and their meanings are:

       dd, ii   The _i_n_t argument is converted to signed decimal  notation.
              The  precision, if any, gives the minimum number of digits
              that must appear; if the converted  value  requires  fewer
              digits,  it is padded on the left with zeros.  The default
              precision is 1.  When 0 is printed with an explicit preci‐
              sion 0, the output is empty.

       oo, uu, xx, XX
              The  _u_n_s_i_g_n_e_d  _i_n_t argument is converted to unsigned octal
              (oo), unsigned decimal (uu), or unsigned hexadecimal (xx  and
              XX)  notation.   The  letters aabbccddeeff are used for xx conver‐
              sions; the letters AABBCCDDEEFF are used for XX conversions.  The
              precision, if any, gives the minimum number of digits that
              must appear; if the converted value requires fewer digits,
              it  is  padded on the left with zeros.  The default preci‐
              sion is 1.  When 0 is printed with an  explicit  precision
              0, the output is empty.

       ee, EE   The  _d_o_u_b_l_e argument is rounded and converted in the style
              [-]d..dddee±dd where there is one digit (which is nonzero if
              the  argument is nonzero) before the decimal-point charac‐
              ter and the number of digits after it is equal to the pre‐
              cision;  if the precision is missing, it is taken as 6; if
              the precision is zero, no decimal-point character appears.
              An  EE  conversion uses the letter EE (rather than ee) to in‐
              troduce the exponent.  The  exponent  always  contains  at
              least  two  digits;  if the value is zero, the exponent is
              00.

       ff, FF   The _d_o_u_b_l_e argument is rounded and  converted  to  decimal
              notation in the style [-]ddd..ddd, where the number of dig‐
              its after the decimal-point character is equal to the pre‐
              cision  specification.  If the precision is missing, it is
              taken as 6; if the precision is explicitly zero, no  deci‐
              mal-point  character appears.  If a decimal point appears,
              at least one digit appears before it.

              (SUSv2 does not know  about  FF  and  says  that  character
              string  representations  for  infinity and NaN may be made
              available.  SUSv3 adds a specification  for  FF.   The  C99
              standard specifies "[-]inf" or "[-]infinity" for infinity,
              and a string starting with "nan" for NaN, in the case of ff
              conversion,  and "[-]INF" or "[-]INFINITY" or "NAN" in the
              case of FF conversion.)

       gg, GG   The _d_o_u_b_l_e argument is converted in style ff or ee (or FF  or
              EE  for GG conversions).  The precision specifies the number
              of significant digits.  If the  precision  is  missing,  6
              digits  are given; if the precision is zero, it is treated
              as 1.  Style ee is used if the exponent from its conversion
              is less than -4 or greater than or equal to the precision.
              Trailing zeros are removed from the fractional part of the
              result;  a decimal point appears only if it is followed by
              at least one digit.

       aa, AA   (C99; not in SUSv2, but added in SUSv3) For aa  conversion,
              the  _d_o_u_b_l_e  argument is converted to hexadecimal notation
              (using the letters abcdef) in the style [-]00xxh..hhhhpp±; for
              AA  conversion  the  prefix 00XX, the letters ABCDEF, and the
              exponent separator PP is used.  There  is  one  hexadecimal
              digit  before  the decimal point, and the number of digits
              after it is equal to the precision.  The default precision
              suffices  for  an  exact representation of the value if an
              exact representation in base 2  exists  and  otherwise  is
              sufficiently  large  to distinguish values of type _d_o_u_b_l_e.
              The digit before the decimal point is unspecified for non‐
              normalized  numbers, and nonzero but otherwise unspecified
              for normalized numbers.

       cc      If no ll modifier is present, the _i_n_t argument is converted
              to  an _u_n_s_i_g_n_e_d _c_h_a_r, and the resulting character is writ‐
              ten.  If an ll modifier is present, the _w_i_n_t___t (wide  char‐
              acter)  argument is converted to a multibyte sequence by a
              call to the wwccrrttoommbb(3) function, with a  conversion  state
              starting in the initial state, and the resulting multibyte
              string is written.

       ss      If no ll modifier is present: the _c_o_n_s_t _c_h_a_r _* argument  is
              expected  to  be  a  pointer to an array of character type
              (pointer to a string).   Characters  from  the  array  are
              written  up to (but not including) a terminating null byte
              ('\0'); if a precision is specified, no more than the num‐
              ber  specified  are  written.  If a precision is given, no
              null byte need be present; if the precision is not  speci‐
              fied,  or is greater than the size of the array, the array
              must contain a terminating null byte.

              If an ll modifier is present: the _c_o_n_s_t _w_c_h_a_r___t _*  argument
              is  expected  to  be a pointer to an array of wide charac‐
              ters.  Wide characters from the  array  are  converted  to
              multibyte  characters  (each  by  a call to the wwccrrttoommbb(3)
              function, with a conversion state starting in the  initial
              state  before the first wide character), up to and includ‐
              ing a terminating  null  wide  character.   The  resulting
              multibyte characters are written up to (but not including)
              the terminating null byte.  If a precision  is  specified,
              no  more  bytes than the number specified are written, but
              no partial multibyte characters are  written.   Note  that
              the  precision determines the number of _b_y_t_e_s written, not
              the number of _w_i_d_e _c_h_a_r_a_c_t_e_r_s or  _s_c_r_e_e_n  _p_o_s_i_t_i_o_n_s.   The
              array  must contain a terminating null wide character, un‐
              less a precision is given and it is so small that the num‐
              ber  of bytes written exceeds it before the end of the ar‐
              ray is reached.

       CC      (Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.)  Syn‐
              onym for llcc.  Don't use.

       SS      (Not in C99 or C11, but in SUSv2, SUSv3, and SUSv4.)  Syn‐
              onym for llss.  Don't use.

       pp      The _v_o_i_d _* pointer argument is printed in hexadecimal  (as
              if by %%##xx or %%##llxx).

       nn      The number of characters written so far is stored into the
              integer pointed to by the  corresponding  argument.   That
              argument  shall be an _i_n_t _*, or variant whose size matches
              the (optionally) supplied integer length modifier.  No ar‐
              gument  is converted.  (This specifier is not supported by
              the bionic C library.)  The behavior is undefined  if  the
              conversion  specification  includes  any  flags,  a  field
              width, or a precision.

       mm      (Glibc extension; supported by uClibc  and  musl.)   Print
              output of _s_t_r_e_r_r_o_r_(_e_r_r_n_o_).  No argument is required.

       %%      A '%' is written.  No argument is converted.  The complete
              conversion specification is '%%'.

RREETTUURRNN VVAALLUUEE
       Upon successful return, these  functions  return  the  number  of
       characters printed (excluding the null byte used to end output to
       strings).

       The functions ssnnpprriinnttff() and vvssnnpprriinnttff() do not write  more  than
       _s_i_z_e  bytes (including the terminating null byte ('\0')).  If the
       output was truncated due to this limit, then the return value  is
       the  number  of  characters (excluding the terminating null byte)
       which would have been written to the final string if enough space
       had  been  available.  Thus, a return value of _s_i_z_e or more means
       that the output was truncated.  (See also below under NOTES.)

       If an output error is encountered, a negative value is returned.

AATTTTRRIIBBUUTTEESS
       For an explanation of the terms used in  this  section,  see  aatt‐‐
       ttrriibbuutteess(7).

       ┌────────────────────────┬───────────────┬────────────────┐
       │IInntteerrffaaccee               │ AAttttrriibbuuttee     │ VVaalluuee          │
       ├────────────────────────┼───────────────┼────────────────┤
       │pprriinnttff(), ffpprriinnttff(),    │ Thread safety │ MT-Safe locale │
       │sspprriinnttff(), ssnnpprriinnttff(),  │               │                │
       │vvpprriinnttff(), vvffpprriinnttff(),  │               │                │
       │vvsspprriinnttff(), vvssnnpprriinnttff() │               │                │
       └────────────────────────┴───────────────┴────────────────┘

CCOONNFFOORRMMIINNGG TTOO
       ffpprriinnttff(),    pprriinnttff(),    sspprriinnttff(),    vvpprriinnttff(),   vvffpprriinnttff(),
       vvsspprriinnttff(): POSIX.1-2001, POSIX.1-2008, C89, C99.

       ssnnpprriinnttff(), vvssnnpprriinnttff(): POSIX.1-2001, POSIX.1-2008, C99.

       The ddpprriinnttff() and vvddpprriinnttff() functions were originally GNU exten‐
       sions that were later standardized in POSIX.1-2008.

       Concerning  the return value of ssnnpprriinnttff(), SUSv2 and C99 contra‐
       dict each other: when ssnnpprriinnttff() is called with _s_i_z_e=0 then SUSv2
       stipulates an unspecified return value less than 1, while C99 al‐
       lows _s_t_r to be NULL in this case, and gives the return value  (as
       always)  as the number of characters that would have been written
       in case the output string has been  large  enough.   POSIX.1-2001
       and later align their specification of ssnnpprriinnttff() with C99.

       glibc  2.1  adds  length modifiers hhhh, jj, tt, and zz and conversion
       characters aa and AA.

       glibc 2.2 adds the conversion character FF with C99 semantics, and
       the flag character II.

NNOOTTEESS
       Some programs imprudently rely on code such as the following

           sprintf(buf, "%s some further text", buf);

       to  append  text  to _b_u_f.  However, the standards explicitly note
       that the results are undefined if source and destination  buffers
       overlap  when  calling sspprriinnttff(), ssnnpprriinnttff(), vvsspprriinnttff(), and vvss‐‐
       nnpprriinnttff().  Depending on the version of ggcccc(1) used, and the com‐
       piler  options employed, calls such as the above will nnoott produce
       the expected results.

       The glibc implementation of  the  functions  ssnnpprriinnttff()  and  vvss‐‐
       nnpprriinnttff()  conforms  to the C99 standard, that is, behaves as de‐
       scribed above, since glibc version 2.1.  Until glibc 2.0.6,  they
       would return -1 when the output was truncated.

BBUUGGSS
       Because  sspprriinnttff()  and  vvsspprriinnttff()  assume  an  arbitrarily long
       string, callers must be careful not to overflow the actual space;
       this  is often impossible to assure.  Note that the length of the
       strings produced is locale-dependent and  difficult  to  predict.
       Use  ssnnpprriinnttff()  and  vvssnnpprriinnttff()  instead  (or  aasspprriinnttff(3)  and
       vvaasspprriinnttff(3)).

       Code such as pprriinnttff((_f_o_o));; often indicates a bug,  since  _f_o_o  may
       contain  a  % character.  If _f_o_o comes from untrusted user input,
       it may contain %%nn, causing the pprriinnttff() call to write  to  memory
       and creating a security hole.

EEXXAAMMPPLLEE
       To print _P_i to five decimal places:

           #include <math.h>
           #include <stdio.h>
           fprintf(stdout, "pi = %.5f\n", 4 * atan(1.0));

       To  print  a  date  and time in the form "Sunday, July 3, 10:02",
       where _w_e_e_k_d_a_y and _m_o_n_t_h are pointers to strings:

           #include <stdio.h>
           fprintf(stdout, "%s, %s %d, %.2d:%.2d\n",
                   weekday, month, day, hour, min);

       Many countries use the day-month-year order.  Hence, an  interna‐
       tionalized  version must be able to print the arguments in an or‐
       der specified by the format:

           #include <stdio.h>
           fprintf(stdout, format,
                   weekday, month, day, hour, min);

       where _f_o_r_m_a_t depends on locale, and may  permute  the  arguments.
       With the value:

           "%1$s, %3$d. %2$s, %4$d:%5$.2d\n"

       one might obtain "Sonntag, 3. Juli, 10:02".

       To  allocate  a sufficiently large string and print into it (code
       correct for both glibc 2.0 and glibc 2.1):

       #include <stdio.h>
       #include <stdlib.h>
       #include <stdarg.h>

       char *
       make_message(const char *fmt, ...)
       {
           int size = 0;
           char *p = NULL;
           va_list ap;

           /* Determine required size */

           va_start(ap, fmt);
           size = vsnprintf(p, size, fmt, ap);
           va_end(ap);

           if (size < 0)
               return NULL;

           size++;             /* For '\0' */
           p = malloc(size);
           if (p == NULL)
               return NULL;

           va_start(ap, fmt);
           size = vsnprintf(p, size, fmt, ap);
           va_end(ap);

           if (size < 0) {
               free(p);
               return NULL;
           }

           return p;
       }

       If truncation occurs in glibc versions prior to  2.0.6,  this  is
       treated as an error instead of being handled gracefully.

SSEEEE AALLSSOO
       pprriinnttff(1),  aasspprriinnttff(3),  ppuuttss(3),  ssccaannff(3),  sseettllooccaallee(3), ssttrr‐‐
       ffrroommdd(3), wwccrrttoommbb(3), wwpprriinnttff(3), llooccaallee(5)

CCOOLLOOPPHHOONN
       This page is part of release 5.05 of the Linux _m_a_n_-_p_a_g_e_s project.
       A  description  of the project, information about reporting bugs,
       and  the  latest  version  of  this  page,  can   be   found   at
       https://www.kernel.org/doc/man-pages/.

GNU                            2019-10-10                      PRINTF(3)
